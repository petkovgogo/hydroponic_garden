// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Webapp.Models.Data;

#nullable disable

namespace Webapp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220524223228_TypoFixed")]
    partial class TypoFixed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Webapp.Models.Data.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsPlanted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_planted");

                    b.Property<double>("MaxHumidity")
                        .HasColumnType("double precision")
                        .HasColumnName("max_humidity");

                    b.Property<double>("MaxPh")
                        .HasColumnType("double precision")
                        .HasColumnName("max_ph");

                    b.Property<int>("MaxTds")
                        .HasColumnType("integer")
                        .HasColumnName("max_tds");

                    b.Property<double>("MaxTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("max_temperature");

                    b.Property<double>("MinHumidity")
                        .HasColumnType("double precision")
                        .HasColumnName("min_humidity");

                    b.Property<double>("MinPh")
                        .HasColumnType("double precision")
                        .HasColumnName("min_ph");

                    b.Property<int>("MinTds")
                        .HasColumnType("integer")
                        .HasColumnName("min_tds");

                    b.Property<double>("MinTemperature")
                        .HasColumnType("double precision")
                        .HasColumnName("min_temperature");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notes");

                    b.HasKey("Id")
                        .HasName("pk_plants");

                    b.ToTable("plants", (string)null);
                });

            modelBuilder.Entity("Webapp.Models.Data.PlantNutrient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<int>("PlantId")
                        .HasColumnType("integer")
                        .HasColumnName("plant_id");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision")
                        .HasColumnName("quantity");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("unit");

                    b.HasKey("Id")
                        .HasName("pk_plant_nutrients");

                    b.HasIndex("PlantId")
                        .HasDatabaseName("ix_plant_nutrients_plant_id");

                    b.ToTable("plant_nutrients", (string)null);
                });

            modelBuilder.Entity("Webapp.Models.Data.PlantNutrient", b =>
                {
                    b.HasOne("Webapp.Models.Data.Plant", "Plant")
                        .WithMany("Nutrients")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plant_nutrients_plants_plant_id");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Webapp.Models.Data.Plant", b =>
                {
                    b.Navigation("Nutrients");
                });
#pragma warning restore 612, 618
        }
    }
}
